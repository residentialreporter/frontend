{"version":3,"sources":["webpack:///src/app/components/password-reset/password-reset.component.html","webpack:///src/app/pages/password-reset/password-reset.module.ts","webpack:///src/app/pages/password-reset/password-reset-routing.module.ts","webpack:///src/app/pages/password-reset/password-reset-page.scss","webpack:///src/app/components/password-reset/password-reset.component.ts","webpack:///src/app/pages/password-reset/password-reset-page.component.html","webpack:///src/app/components/password-reset/password-reset.component.scss","webpack:///src/app/pages/password-reset/password-reset-page.component.ts"],"names":["PasswordResetPageModule","imports","declarations","routes","path","component","PasswordResetPageRoutingModule","forChild","exports","PasswordResetComponent","fb","route","router","userService","resetForm","address","returnUrl","snapshot","queryParams","group","required","formSubmitAttempt","valid","get","value","resetPassword","addressInvalid","selector","template","PasswordResetPageComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC8BFA,uBAAuB;AAAA;AAAA,O;;AAAvBA,6BAAuB,6DAfnC,+DAAS;AACNC,eAAO,EAAE,CACL,4DADK,EAEL,0DAFK,EAGL,0DAHK,EAIL,wEAJK,EAKL,oEALK,EAML,+EANK,EAOL,uEAPK,EAQL,kEARK,EASL,6FATK,EAUL,oEAVK,CADH;AAaNC,oBAAY,EAAE,CAAC,yFAAD,EAA6B,+HAA7B;AAbR,OAAT,CAemC,GAAvBF,uBAAuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1Bb,UAAMG,MAAM,GAAW,CACnB;AACIC,YAAI,EAAE,EADV;AAEIC,iBAAS,EAAE;AAFf,OADmB,CAAvB;;UAWaC,8BAA8B;AAAA;AAAA,O;;AAA9BA,oCAA8B,6DAJ1C,+DAAS;AACNL,eAAO,EAAE,CAAC,6DAAaM,QAAb,CAAsBJ,MAAtB,CAAD,CADH;AAENK,eAAO,EAAE,CAAC,4DAAD;AAFH,OAAT,CAI0C,GAA9BF,8BAA8B,CAA9B;;;;;;;;;;;;;;;;ACfb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCYFG,sBAAsB;AAQ/B,wCACYC,EADZ,EAEYC,KAFZ,EAGYC,MAHZ,EAIYC,WAJZ,EAIoC;AAAA;;AAHxB,eAAAH,EAAA,GAAAA,EAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AAXZ,eAAAC,SAAA,GAAuB,IAAI,wDAAJ,CAAc;AACjCC,mBAAO,EAAE,IAAI,0DAAJ;AADwB,WAAd,CAAvB;AAaC;;AAd8B;AAAA;AAAA,qCAgBd;;;;;;AACb,2BAAKC,SAAL,GAAiB,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,WAApB,CAAgCF,SAAhC,IAA6C,OAA9D;AACA,2BAAKF,SAAL,GAAiB,KAAKJ,EAAL,CAAQS,KAAR,CAAc;AAC3BJ,+BAAO,EAAE,CAAC,EAAD,EAAK,0DAAWK,QAAhB;AADkB,uBAAd,CAAjB,C,CAIA;AACA;AACA;;;;;;;;;AACH;AAzB8B;AAAA;AAAA,qCA2Bd;;;;;;;AACb,2BAAKC,iBAAL,GAAyB,KAAzB;;2BACI,KAAKP,SAAL,CAAeQ,K;;;;;;AAELP,6B,GAAU,KAAKD,SAAL,CAAeS,GAAf,CAAmB,SAAnB,EAA8BC,K;;AAC9C,6BAAM,KAAKX,WAAL,CAAiBY,aAAjB,CAA+BV,OAA/B,CAAN;;;;;;;;;AAEA,2BAAKW,cAAL,GAAsB,IAAtB;;;;;;;AAGJ,2BAAKL,iBAAL,GAAyB,IAAzB;;;;;;;;;AAEP;AAvC8B;;AAAA;AAAA,S;;;;gBAX1B;;gBACA;;gBAAgB;;gBAChB;;;;AASIZ,4BAAsB,6DANlC,gEAAU;AACPkB,gBAAQ,EAAE,oBADH;AAEPC,gBAAQ,EAAR,iFAFO;;AAAA,OAAV,CAMkC,GAAtBnB,sBAAsB,CAAtB;;;;;;;;;;;;;;;;ACZb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCWFoB,0BAA0B;AAQnC,4CACYnB,EADZ,EAEYC,KAFZ,EAGYC,MAHZ,EAIYC,WAJZ,EAIoC;AAAA;;AAHxB,eAAAH,EAAA,GAAAA,EAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AAXZ,eAAAC,SAAA,GAAuB,IAAI,wDAAJ,CAAc;AACjCC,mBAAO,EAAE,IAAI,0DAAJ;AADwB,WAAd,CAAvB;AAaC;;AAdkC;AAAA;AAAA,qCAgBlB;;;;;;AACb,2BAAKC,SAAL,GAAiB,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,WAApB,CAAgCF,SAAhC,IAA6C,OAA9D;AACA,2BAAKF,SAAL,GAAiB,KAAKJ,EAAL,CAAQS,KAAR,CAAc;AAC3BJ,+BAAO,EAAE,CAAC,EAAD,EAAK,0DAAWK,QAAhB;AADkB,uBAAd,CAAjB,C,CAIA;AACA;AACA;;;;;;;;;AACH;AAzBkC;AAAA;AAAA,qCA2BlB;;;;;;;AACb,2BAAKC,iBAAL,GAAyB,KAAzB;;2BACI,KAAKP,SAAL,CAAeQ,K;;;;;;AAELP,6B,GAAU,KAAKD,SAAL,CAAeS,GAAf,CAAmB,SAAnB,EAA8BC,K;;AAC9C,6BAAM,KAAKX,WAAL,CAAiBY,aAAjB,CAA+BV,OAA/B,CAAN;;;;;;;;;AAEA,2BAAKW,cAAL,GAAsB,IAAtB;;;;;;;AAGJ,2BAAKL,iBAAL,GAAyB,IAAzB;;;;;;;;;AAEP;AAvCkC;;AAAA;AAAA,S;;;;gBAV9B;;gBACA;;gBAAgB;;gBAChB;;;;AAQIQ,gCAA0B,6DALtC,gEAAU;AACPF,gBAAQ,EAAE,yBADH;AAEPC,gBAAQ,EAAR,sFAFO;;AAAA,OAAV,CAKsC,GAA1BC,0BAA0B,CAA1B","file":"residentialreporter-pages-password-reset-password-reset-module-es5.js","sourcesContent":["export default \"\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { PasswordResetPageComponent } from './password-reset-page.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { PasswordResetPageRoutingModule } from './password-reset-routing.module';\nimport { MatInputModule } from '@angular/material/input';\nimport { PasswordResetComponent } from '@residentialreporter/components/password-reset/password-reset.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        MatButtonModule,\n        MatCardModule,\n        MatFormFieldModule,\n        MatInputModule,\n        ReactiveFormsModule,\n        PasswordResetPageRoutingModule,\n        TranslateModule\n    ],\n    declarations: [PasswordResetPageComponent, PasswordResetComponent]\n})\nexport class PasswordResetPageModule {\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PasswordResetPageComponent } from './password-reset-page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PasswordResetPageComponent,\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class PasswordResetPageRoutingModule {\n}\n","export default \"mat-card {\\n  max-width: 400px;\\n  margin: 2em auto;\\n  text-align: center;\\n}\\n\\nmat-form-field {\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQtcGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxjQUFBO0FBQ0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9wYXNzd29yZC1yZXNldC9wYXNzd29yZC1yZXNldC1wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtY2FyZCB7XG4gIG1heC13aWR0aDogNDAwcHg7XG4gIG1hcmdpbjogMmVtIGF1dG87XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxubWF0LWZvcm0tZmllbGQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuIl19 */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from '../../services/user/user.service';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n    selector: 'app-password-reset',\n    templateUrl: './password-reset.component.html',\n    styleUrls: ['./password-reset.component.scss'],\n})\n\nexport class PasswordResetComponent implements OnInit {\n    resetForm: FormGroup = new FormGroup({\n        address: new FormControl(),\n    });\n    public addressInvalid: boolean;\n    private formSubmitAttempt: boolean;\n    private returnUrl: string;\n\n    constructor(\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private userService: UserService\n    ) {\n    }\n\n    async ngOnInit() {\n        this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/home';\n        this.resetForm = this.fb.group({\n            address: ['', Validators.required],\n        });\n\n        // if (await this.userService.checkAuthenticated()) {\n        //    await this.router.navigate([this.returnUrl]);\n        // }\n    }\n\n    async onSubmit() {\n        this.formSubmitAttempt = false;\n        if (this.resetForm.valid) {\n            try {\n                const address = this.resetForm.get('address').value;\n                await this.userService.resetPassword(address);\n            } catch (err) {\n                this.addressInvalid = true;\n            }\n        } else {\n            this.formSubmitAttempt = true;\n        }\n    }\n}\n\n","export default \"<mat-card>\\n    <mat-card-content>\\n        <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"resetForm\\\">\\n            <h2>{{ 'Reset password' | translate }}</h2>\\n\\n            <mat-form-field class=\\\"full-width-input\\\">\\n                <input formControlName=\\\"address\\\"\\n                       matInput\\n                       placeholder=\\\"{{ 'Email address' | translate }}\\\"\\n                       required>\\n                <mat-error>\\n                    {{ 'Please provide a valid email address' | translate }}\\n                </mat-error>\\n            </mat-form-field>\\n            <button color=\\\"primary\\\" mat-raised-button>{{ 'Send password reset link' | translate }}</button>\\n        </form>\\n    </mat-card-content>\\n</mat-card>\\n\";","export default \"mat-card {\\n  max-width: 400px;\\n  margin: 2em auto;\\n  text-align: center;\\n}\\n\\nmat-form-field {\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9wYXNzd29yZC1yZXNldC9wYXNzd29yZC1yZXNldC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQUNGOztBQUVBO0VBQ0UsY0FBQTtBQUNGIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9wYXNzd29yZC1yZXNldC9wYXNzd29yZC1yZXNldC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1jYXJkIHtcbiAgbWF4LXdpZHRoOiA0MDBweDtcbiAgbWFyZ2luOiAyZW0gYXV0bztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG5tYXQtZm9ybS1maWVsZCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from '@residentialreporter/services/user/user.service';\n\n\n@Component({\n    selector: 'app-password-reset-page',\n    templateUrl: 'password-reset-page.component.html',\n    styleUrls: ['./password-reset-page.scss'],\n})\nexport class PasswordResetPageComponent implements OnInit{\n    resetForm: FormGroup = new FormGroup({\n        address: new FormControl(),\n    });\n    public addressInvalid: boolean;\n    private formSubmitAttempt: boolean;\n    private returnUrl: string;\n\n    constructor(\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private userService: UserService\n    ) {\n    }\n\n    async ngOnInit() {\n        this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/home';\n        this.resetForm = this.fb.group({\n            address: ['', Validators.required],\n        });\n\n        // if (await this.userService.checkAuthenticated()) {\n        //    await this.router.navigate([this.returnUrl]);\n        // }\n    }\n\n    async onSubmit() {\n        this.formSubmitAttempt = false;\n        if (this.resetForm.valid) {\n            try {\n                const address = this.resetForm.get('address').value;\n                await this.userService.resetPassword(address);\n            } catch (err) {\n                this.addressInvalid = true;\n            }\n        } else {\n            this.formSubmitAttempt = true;\n        }\n    }\n}\n"]}